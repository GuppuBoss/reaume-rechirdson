// ===========================================
// sass/_mixins.scss
// ===========================================
//
// Custom SCSS Mixins.
// ===========================================

// ===========================================
// Table of Contents
//
// 00. Variables
// 01. Spacing
// 02. Background Image
//    i. Background Image Full
//   ii. Background Image Only
// 03. All Colors
// 04. All Headings Colors
// 05. Units
//    i. Calculate REM
//   ii. Calculate EM
//  iii. Font Size
//   iv. Margin
//    v. Padding
// 06. Breakpoints
// 07. Opacity
// 08. Vertically Centered
// 09. Position
// 10. Background Position
// 11. Auto Center Vertically
// 12. Pixel to Percentage
// 13. Center with Width
// 14. Grids
// 15. Font Size Pixel to Percentage
// 16. Remove the unit of a length
// 17. Flexbox Container
// 18. Primary Gradient
// 19. Aspect Ratio
// 20. Single Button
// 21. Truncate Line
// 22. Property Rem
//
// ===========================================

// 01. Spacing
// ===========================================

//
// Creates spacing classes for paddings and margins
//
// $type      = padding, margin
// $multiple  = 1, 2, 5, 10... ; e.g. mt5, mt10, mt15...
// $end       = 10, 20, 50... ; Number of times loop runs.
// $direction = top, right, bottom, left ; set the direction
//

@mixin spacing($type, $multiple, $end, $direction) {
	$class: m;

	@if $type == padding {
		$class: p;
	} @else {
		$class: m;
	}

	@for $i from 1 through $end {
		@if $direction == top {
			.#{$class}t#{$multiple * $i} {
				#{$type}-top: 1px * ($multiple * $i);
			}
		} @else if $direction == bottom {
			.#{$class}b#{$multiple * $i} {
				#{$type}-bottom: 1px * ($multiple * $i);
			}
		} @else if $direction == left {
			.#{$class}l#{$multiple * $i} {
				#{$type}-left: 1px * ($multiple * $i);
			}
		} @else if $direction == right {
			.#{$class}r#{$multiple * $i} {
				#{$type}-left: 1px * ($multiple * $i);
			}
		}
	}
}

// 02. Background Image
// ===========================================

//
// $path-image variable should be in your _variables.scss file, e.g.
// $path-image: '../images'
//

@mixin bg-img-full(
	$path,
	$color: transparent,
	$repeat: no-repeat,
	$position: 0 0,
	$size: null
) {
	background: $color url("#{$path-image}/#{$path}") $repeat $position;
	background-size: $size;
}

@mixin bg-img-only($path) {
	background-image: url("#{$path-image}/#{$path}");
}

// // 03. All Colors
// // ===========================================

// //
// // Replace all text color inside an element.
// // Useful to use on dark background to achieve light text color
// //

// @mixin all-colors($color) {
// 	color: $color;

// 	h1,
// 	h2,
// 	h3,
// 	h4,
// 	h5,
// 	h6,
// 	a {
// 		color: $color;
// 	}
// }

// 04. All Headings Colors
// ===========================================

//
// Replace all headings color inside an element.
// Useful to use on dark background to achieve light headings color
//

@mixin all-headings-colors($color) {
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		color: $color;
	}
}

// Property Rem
// ===========================================

//
// This mixin generates properties with 'rem' unit
// with a fallback 'px' unit for old browsers.
//

@mixin prop-rem($prop, $px) {
	#{$prop}: $px;
	#{$prop}: calc-rem($px);
}

// Property Em
// ===========================================

//
// This mixin generates properties with 'em' unit
// with a fallback 'px' unit for old browsers.
//

@mixin prop-em($prop, $px) {
	#{$prop}: $px;
	#{$prop}: calc-em($px);
}

// 05. Units
// ===========================================

//
// 05 (i). Calculate Rem
//

@function calc-rem($size: (), $root: $font-size-root) {
	$size-root: $root;
	$size_final: "";

	@for $i from 1 to length($size) + 1 {
		$n_size: nth($size, $i) / $size-root;
		$size_final: join($size_final, strip-unit($n_size) * 1rem);
	}
	@return #{$size_final};
}

//
// 05 (ii). Margin
//
// calculates margin in 'rem' with 'px' fallback.
// with the option to set direction, e.g., 'margin-top'
//

@function calc-em($size: (), $base: null) {
	$size-root: if($base != null, $base, $font-size-base);
	$size_final: "";

	@for $i from 1 to length($size) + 1 {
		$n_size: nth($size, $i) / $size-root;
		$size_final: join($size_final, strip-unit($n_size) * 1em);
	}
	@return #{$size_final};
}

//
// 05 (iii). Font Size
//
// calculates font size in 'rem' with 'px' fallback.
//

@mixin font-size($size) {
	// font-size: $size;
	font-size: calc-rem($size);
}

//
// 05 (iv). Margin
//
// calculates margin in 'rem' with 'px' fallback.
// with the option to set direction, e.g., 'margin-top'
//

@mixin margin($size, $dir: null) {
	@if $dir == "t" {
		// margin-top: $size;
		margin-top: calc-rem($size);
	} @else if $dir == "r" {
		// margin-right: $size;
		margin-right: calc-rem($size);
	} @else if $dir == "b" {
		// margin-bottom: $size;
		margin-bottom: calc-rem($size);
	} @else if $dir == "l" {
		// margin-left: $size;
		margin-left: calc-rem($size);
	} @else {
		@if $dir != null {
			$dir: "-" + $dir;
		}

		margin#{$dir}: $size;
		margin#{$dir}: calc-rem($size);
	}
}

//
// 05 (v). Padding
//
// calculates padding in 'rem' with 'px' fallback.
// with the option to set direction, e.g., 'padding-top'
//

@mixin padding($size, $dir: null) {
	@if $dir != null {
		$dir: "-" + $dir;
	}

	@if $dir == "t" {
		padding-top: $size;
		padding-top: calc-rem($size);
	} @else if $dir == "r" {
		padding-right: $size;
		padding-right: calc-rem($size);
	} @else if $dir == "b" {
		padding-bottom: $size;
		padding-bottom: calc-rem($size);
	} @else if $dir == "l" {
		padding-left: $size;
		padding-left: calc-rem($size);
	} @else {
		padding#{$dir}: $size;
		padding#{$dir}: calc-rem($size);
	}
}

//
// 05 (v). Size Rem
//
// calculates size (width & height) in 'rem'
// with 'px' fallback.
//

@function is-size($value) {
	@return is-length($value) or
		contains("fill" "fit-content" "min-content" "max-content", $value);
}

@mixin size-rem($value) {
	$width: nth($value, 1);
	$height: $width;

	@if length($value) > 1 {
		$height: nth($value, 2);
	}

	@if is-size($height) {
		height: $height;
		height: calc-rem($height);
	} @else {
		@warn "`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.";
	}

	@if is-size($width) {
		width: $width;
		width: calc-rem($width);
	} @else {
		@warn "`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.";
	}
}

//
// 05 (v). Width Rem
//
// calculates width in 'rem' with 'px' fallback.
//

@mixin width($width, $type: null) {
	@if $type == max {
		max-width: $width;
		max-width: calc-rem($width);
	} @else if $type == min {
		min-width: $width;
		min-width: calc-rem($width);
	} @else {
		width: $width;
		width: calc-rem($width);
	}
}

//
// 05 (v). Height Rem
//
// calculates height in 'rem' with 'px' fallback.
//

@mixin height($height, $type: null) {
	@if $type == max {
		max-height: $height;
		max-height: calc-rem($height);
	} @else if $type == min {
		min-height: $height;
		min-height: calc-rem($height);
	} @else {
		height: $height;
		height: calc-rem($height);
	}
}

// 06. Breakpoints
// ===========================================

// Media Only

@mixin media($width, $upper: false) {
	@if $upper == true {
		@media screen and (min-width: $width + 1) {
			@content;
		}
	} @else {
		@media screen and (max-width: $width) {
			@content;
		}
	}
}

// Max Width

//
// Default following variables in your _variabls.scss file:
// $media-exlarge : 1400px;
// $breakpoint-lg   : 992px;
// $breakpoint-md  : 767px;
// $breakpoint-sm   : 480px;
//

@mixin bp-x-large {
	@media screen and (max-width: $breakpoint-xl) {
		@content;
	}
}

@mixin bp-large {
	@media screen and (max-width: $breakpoint-lg) {
		@content;
	}
}

@mixin bp-medium {
	@media screen and (max-width: $breakpoint-md) {
		@content;
	}
}

@mixin bp-small {
	@media screen and (max-width: $breakpoint-sm) {
		@content;
	}
}

@mixin bp-x-small {
	@media screen and (max-width: $breakpoint-xs) {
		@content;
	}
}

// Min Width

@mixin bp-x-large-min {
	@media screen and (min-width: $breakpoint-xl + 1) {
		@content;
	}
}

@mixin bp-large-min {
	@media screen and (min-width: $breakpoint-lg + 1) {
		@content;
	}
}

@mixin bp-medium-min {
	@media screen and (min-width: $breakpoint-md + 1) {
		@content;
	}
}

@mixin bp-small-min {
	@media screen and (min-width: $breakpoint-sm + 1) {
		@content;
	}
}

@mixin bp-x-small-min {
	@media screen and (min-width: $breakpoint-sm + 1) {
		@content;
	}
}

// 07. Opacity
// ===========================================

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

// 08. Vertically Centered
// ===========================================

//
// $height: add fixed height (must)
// $selector: add child selector to assign "vertical-align: middle;" (optional)
//

@mixin vertical-center($height, $selector: null) {
	display: block;
	height: $height;

	@if $selector != null {
		#{$selector} {
			vertical-align: middle;
		}
	}

	&:before {
		content: "";
		display: inline-block;
		height: 100%;
		vertical-align: middle;
	}
}

// 09. Position
// ===========================================

@mixin position(
	$position: "absolute",
	$width: null,
	$height: null,
	$top: null,
	$right: null,
	$bottom: null,
	$left: null,
	$index: null
) {
	position: #{$position};
	width: $width;
	height: $height;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	z-index: $index;
}

// 10. Background Position
// ===========================================

@mixin background(
	$color: null,
	$repeat: null,
	$size: null,
	$position: null,
	$attachment: null
) {
	background-color: $color;
	background-repeat: #{$repeat};
	background-size: #{$size};
	background-attachment: #{$attachment};
	background-position: $position;
}

// 11. Background Opacity
// ===========================================

@mixin background-opacity($color, $opacity: 0.85) {
	background-color: $color;
	background-color: rgba($color, $opacity);
}

// 12. Pixel to Percentage
// ===========================================

//
// Depending on the container's width
// Can set $container to any value, e.g. 1000px
// And the percentage will be calculated
// based on container's value
//

@function per-calc($width, $container: $container-width) {
	@return percentage($width / $container);
}

// 13. Center with Width
// ===========================================

//
// @param $width specifies  the width you want for an element
// @param $margin-left      set either to left, right or auto, default 'auto'
// @param $margin-right     set either to left, right or auto, default 'auto'
//

@mixin center-with-width($width, $margin-left: auto, $margin-right: auto) {
	max-width: $width;
	margin-left: $margin-left;
	margin-right: $margin-right;
}

// 14. Grids
// ===========================================

//
// This mixin will create a grid with the number of columns given. Columns
// numbers will be in English e.g. 'five' or 'seven' and up to 'twelve'
//
// @param   $number     enter the number of columns you want to create.
// @param   $gutter     enter the gutter value in pixels or percentage.
// @param   $row-class  enter the class for your row, e.g. 'w-row'
//
// Example
//
// @include grid( 6, 10px, '.w-row' );
//

@mixin grid($number, $gutter, $row-class, $numeric: true) {
	$column-number: $number + 1;
	$columns: (
		"one",
		"two",
		"three",
		"four",
		"five",
		"six",
		"seven",
		"eight",
		"nine",
		"ten",
		"eleven",
		"twelve"
	);

	.#{$row-class} {
		@extend %clearfix;
		@include margin(-$gutter, "left");
		@include margin(-$gutter, "right");
	}

	.col {
		@include padding($gutter, "left");
		@include padding($gutter, "right");
		@include margin($gutter * 2, "bottom");

		// Apply the styling only on desktop.
		@include bp-medium-min {
			float: left;

			@for $i from 1 to $column-number {
				// Check if $numeric is true.
				@if $numeric {
					&--#{$i} {
						width: (100% * $i) / $number;
					}
					// else.
				} @else {
					&--#{ nth( $columns, $i ) } {
						width: (100% * $i) / $number;
					}
				}
			}
		}
	}
}

// 16. Remove the unit of a length
// ===========================================

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

// 18. Primary Gradient
// ===========================================

@mixin primary-gradient() {
	background-color: mix($primary, $secondary);
	background: linear-gradient(-270deg, $primary 0%, $secondary);
}

@mixin primary-gradient-reverse() {
	background-color: mix($primary, $secondary);
	background: linear-gradient(270deg, $primary 0%, $secondary);
}

// 19. Aspect Ratio
// ===========================================

@function aspect-ratio($width_height) {
	$width: nth($width_height, 1);
	$height: $width;

	@if length($width_height) > 1 {
		$height: nth($width_height, 2);
	}

	@return ($height / $width) * 100%;
}

// 20. Single Button
// ===========================================

@mixin single-button($bg, $bg-hover, $text: $body-color) {
	background-color: $bg;
	border-color: $bg;
	color: $text;

	&:hover,
	&:active,
	&:focus {
		color: $text;
		border-color: $bg-hover;
		background-color: $bg-hover;
	}

	&:focus {
		@include input-focus-outline($bg);
	}

	&:disabled {
		background-color: $bg !important;
		border-bottom-color: $bg !important;
	}
}

// 21. Truncate Line
// ===========================================

@mixin truncate-line {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

// 22. Property Rem
// ===========================================

//
// This mixin generates properties with 'rem' unit
// with a fallback 'px' unit for old browsers.
//

@mixin prop-rem($prop, $px) {
	#{$prop}: $px;
	#{$prop}: calc-rem($px);
}

// Clearfix
@mixin clearfix {
	*zoom: 1;
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// 18. Primary Gradient
// ===========================================

@mixin gradient-text($primary_age: 0%, $secondary_age: 70%) {
	// .preserve3d & {
	color: $primary;
	background-image: linear-gradient(
		-270deg,
		$primary $primary_age,
		$secondary $secondary_age
	);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$primary}', endColorstr='#{$secondary}', GradientType=1 );
	background-clip: text;
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	// }

	.no-preserve3d & {
		background: none;
		background-clip: unset;
		-webkit-background-clip: unset;
		-webkit-text-fill-color: unset;
	}
}

// 24. Bootstrap Button Hover/Active/Focus
// ===========================================

@mixin bs-button-hover {
	&:hover,
	&:focus,
	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active,
	.show > &.dropdown-toggle {
		@content;
	}
}

@mixin bs-button-disabled {
	&:disabled,
	&.disabled {
		@content;
	}
}

@mixin bs-button-focus {
	&:focus {
		@content;
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active,
	.show > &.dropdown-toggle {
		&:focus {
			@content;
		}
	}
}

// 19. Input Focus Outline
// ===========================================

@mixin input-focus-outline($color: $primary, $opacity: 0.35, $width: 4px) {
	outline: none;
	border-color: $color;
	box-shadow: 0px 0px 0px $width rgba($color, $opacity);
}

// Last Child No Margin
// ==================================

%last-child-no-margin {
	> :last-child {
		margin-bottom: 0;
	}
}

// PhotoShop Letter Spacing to CSS
// ==================================

@function ps-letter-spacing($unit, $return: "em", $base: 16) {
	@if $return = "em" {
		@return (($unit) / 1000) + em;
	} @else {
		@return (($unit * $base) / 1000) + px;
	}
}

// 23. Row Gutter
// ===========================================

@mixin row-gutter($gutter, $col-class: "col") {
	margin-right: -$gutter / 2;
	margin-left: -$gutter / 2;

	> .#{$col-class},
	> [class*="#{$col-class}-"] {
		padding-right: $gutter / 2;
		padding-left: $gutter / 2;
	}
}
